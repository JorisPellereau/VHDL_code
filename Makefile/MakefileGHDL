# TBD Makefile for GHDL compilation

# == GHDL commandes ==
#GHDL_GCC=/home/linux-jp/ghdl/build/ghdl_gcc
GHDL_GCC=/opt/ghdl1/bin/ghdl
GCOV=/opt/ghdl1/bin/gcov
#/opt/ghdl/build/ghdl_gcc

# == PATH ==
GHDL_WORK_DIR=$(PROJECT_NAME)_GHDL


# == Create GHDL Work Dir ==
create_ghdl_work_dir:
	cd $(HDL_SIMU_PATH); \
	if [ ! -d $(GHDL_WORK_DIR) ]; then \
	  mkdir $(GHDL_WORK_DIR); \
	fi
# ==========================

# == Create GHDL Library ==
create_ghdl_libs:
	cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR); \
	$(foreach list, $(LIB_LIST), mkdir $(list);)
# =========================

# == Create GHDL COVERAGE directory ==
# GHDL_COV_DIR_LIST Must be defined in Makefile
create_ghdl_cov_dir:
	cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR); \
	$(foreach list, $(GHDL_COV_DIR_LIST), mkdir $(list);)
# ====================================

# == CREATE GHDL DIRECTORIES ==
create_ghdl_dir: clean_ghdl_work_dir create_ghdl_work_dir create_ghdl_libs create_ghdl_cov_dir
# =============================

# == Clean GHDL Work Dir ==
clean_ghdl_work_dir:
	cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR); \
	rm -rRf *;
# =========================

# == MakefileGHDL RULES ==
print_ghdl_generic_rules:
	@echo "== GenericGHDL rules =="
	@echo "Create GHDL Work Directory :"
	@echo "make create_ghdl_work_dir"
	@echo ""
	@echo "Create GHDL Library"
	@echo "make create_ghdl_libs"
	@echo ""
	@echo "Create GHDL CODE COVERAGE Directories:"
	@echo "make create_ghdl_cov_dir"
	@echo ""
	@echo ""
	@echo ""
	@echo "Clean GHDL Work Directory"
	@echo "make clean_ghdl_work_dir"
	@echo ""
	@echo "Create All GHDL Directories"
	@echo "make create_ghdl_dir"
	@echo ""
	@echo ""
	@echo ""
	@echo "Scan parsed and added into libraries (NO ANALYZIS)"
	@echo "make ghdl_import_vhd_src [SRC_VHD="XXX"] [VHD_LIB=YYY]"
	@echo ""
	@echo "Analysis and Compile VHD Files"
	@echo "make ghdl_analisys_vhd_src [SRC_VHD="XXX"] [VHD_LIB=YYY]"
	@echo ""
	@echo ""
	@echo ""
	@echo "$(ANALYSIS_ARGS)"
	@echo "$(LIB_LIST)"
	@echo "COV_ARGS : $(COV_ARGS)"
# ========================


# == GHDL Tests ==

# Pass As argument : SRC_VHD : A list with VHD file of a common library
# VHD_LIB : VHDL Library
ghdl_import_vhd_src:
	$(foreach list, $(SRC_VHD),ghdl -i $(GHDL_WORKDIR_PATH) $(list);) \

# == ANALYSE VHD FILES ==
WORK_NAME=--work=$(GHDL_WORK_LIB_NAME)
GHDL_WORKDIR_PATH=--workdir=$(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(GHDL_WORK_LIB_NAME)
ANALYSIS_ARGS+=--ieee=synopsys

# GHDL_LIB_LIST must be pass as argument
ifeq ($(P_ARGS_EN), ON)
     P_ARGS +=$(foreach list, $(GHDL_LIB_LIST),-P$(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(list))
endif

#$(ANALYSIS_OPTIONS)
ifeq ($(GHDL_VERBOSE), ON)
  ANALYSIS_OPTIONS=-v
endif


ghdl_analysis_vhd_src:
	$(foreach list, $(SRC_VHD),ghdl -a $(WORK_NAME) $(GHDL_WORKDIR_PATH) $(ANALYSIS_ARGS) $(P_ARGS) $(list);) \

# ======================


	
# == ELABORATION VHD FILES ==
# GHDL_TOP_INIT must ba passed as argument
ghdl_elaboration_vhd_src:
	ghdl -e $(WORK_NAME) $(GHDL_WORKDIR_PATH) $(ANALYSIS_ARGS) $(P_ARGS) $(GHDL_TOP_UNIT)
# ===========================


# == RUN DESIGN ==
GHDL_RUNTIME_ARGS+=--stop-time=$(TIME)
GHDL_RUNTIME_ARGS+=--vcd=/home/linux-jp/SIMULATION_VHDL/test.vcd

ifeq ($(CODE_COV), ON)
  GHDL_GENERIC+=-gG_FILE_PATH=$(CODE_COVERAGE_INJECTION_FILE)
  GHDL_GENERIC+=-gG_INJECTOR_DATA_WIDTH=$(CODE_COVERAGE_INJECTOR_DATA_WIDTH)
endif

ghdl_run:
	ghdl -r $(WORK_NAME) $(GHDL_WORKDIR_PATH) $(ANALYSIS_ARGS) $(P_ARGS) $(GHDL_TOP_UNIT) $(GHDL_RUNTIME_ARGS) $(GHDL_GENERIC)
# ================


# == CODE COVERAGE ==
# COVERAGE_DIR must be pass as argument
# ghdl_gcc_analysis_vhd_src:
# 	cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR); \
# 	$(foreach list, $(SRC_VHD),$(GHDL_GCC) -a -g -Wc,-ftest-coverage -Wc,-fprofile-arcs $(WORK_NAME) $(GHDL_WORKDIR_PATH) $(ANALYSIS_ARGS) $(P_ARGS) $(list);) \

ifeq ($(CODE_COV_EN), ON)
  ANALYSIS_COV_ARGS=-Wc,-fprofile-arcs -Wc,-ftest-coverage
endif

ghdl_gcc_analysis_vhd_src:
	cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR); \
	$(foreach list, $(SRC_VHD),$(GHDL_GCC) -a $(ANALYSIS_COV_ARGS) $(WORK_NAME) $(GHDL_WORKDIR_PATH) $(ANALYSIS_ARGS) $(P_ARGS) $(list);) \

# COVERAGE_DIR must be pass as argument
ifeq ($(CODE_COV_EN), ON)
  ELAB_COV_ARGS=-Wl,-lgcov -Wl,--coverage
endif

ghdl_gcc_elaboration_vhd_src:
	cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR); \
	$(GHDL_GCC) -e $(ELAB_COV_ARGS) $(WORK_NAME) $(GHDL_WORKDIR_PATH) $(ANALYSIS_ARGS) $(P_ARGS) $(GHDL_TOP_UNIT)
	
# COVERAGE_DIR must be pass as argument
#GHDL_GCC_RUN_ARGS+=
ghdl_gcc_run:
	cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR); \
	$(GHDL_GCC) -r $(GHDL_TOP_UNIT) $(GHDL_GCC_RUN_ARGS) --stop-time=$(TIME)

#./$(GHDL_TOP_UNIT)

# COVERAGE_DIR must be pass as argument
ghdl_gcc_gcov:
	$(GCOV)  --object-directory $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR)/ -b -u -d /home/linux-jp/Documents/GitHub/VHDL_code/MAX7219/tb_sources/tb_lib_max7219_if/max7219_if.vhd
	
	# cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR); \
	# gcov -b -u -t -o $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR)

#$(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR)/*.gcno $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR)/*.gcda
	
# COVERAGE_DIR must be pass as argument
# Info. : lcov_branch_coverage and genhtml_branch_coverage passed to 1 in lcvorc file (/etc/lcovrc)
#LCOV_RC+=--rc lcov_branch_coverage=0
#LCOV_RC+=--rc genhtml_branch_coverage=0
LCOV_RC+=
ghdl_gcc_lcov:
	lcov $(LCOV_RC) -c -d $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR) -o $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR)/coverage.info

# COVERAGE_DIR must be pass as argument
GENHTML_ARGS+=--missed
#GENHTML_ARGS+=-t toto
ghdl_gcc_genhtml:
	genhtml $(GENHTML_ARGS) -o $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR) $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR)/coverage.info


ghdl_gcc_open_coverage_html:
	cd $(HDL_SIMU_PATH)/$(GHDL_WORK_DIR)/$(COVERAGE_DIR); \
	firefox index.html
# ===================
